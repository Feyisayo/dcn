<?php
/**
 * @file
 * Collects Drupal Camp Nigeria 2015 participant details.
 */

/**
 * Implements hook_menu().
 *
 * Returns all the paths that this module will respond to.
 * @see https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_menu/7
 */
function dcn_menu() {
  $paths = array();
  $paths['dcn/add'] = array(
    'title' => 'Add new participant',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dcn_form'),
    'access arguments' => array('add participants'),
    'type' => MENU_NORMAL_ITEM,
  );

  $paths['dcn/%/edit'] = array(
    'title' => 'Edit participant',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dcn_form', 1),
    'access arguments' => array('edit participants'),
    'type' => MENU_LOCAL_TASK,
  );

  $paths['dcn/%/delete'] = array(
    'title' => 'Delete participant',
    'page callback' => 'dcn_delete',
    'page arguments' => array(1),
    'access arguments' => array('delete participants'),
    'type' => MENU_LOCAL_TASK,
  );
  
  $paths['dcn/list'] = array(
    'title' => 'View participants',
    'page callback' => 'dcn_list',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $paths;
}

/**
 * Form builder callback.
 *
 * This function is used to create a form
 *
 * @param array $form
 *   This represents the HTML structure of the form
 *
 * @param array $form_state
 *   This represents the state of the form ie the contents of the elements,
 *   which button was clicked etc.
 *
 * @param int $id
 *   Optional ID of the record to be editted
 *
 * @return array
 *   $form will be returned. The function will fill it with the desired HTML
 *   structure.
 * @see https://www.drupal.org/node/717722
 */
function dcn_form($form, &$form_state, $id = NULL) {
  $info = array();
  if ($id != NULL && is_numeric($id)) {
    // Fetch the participant.
    $participant = db_select('dcn')
      ->fields('dcn')
      ->condition('id', $id, '=')
      ->execute()->fetchAllAssoc('id');
    if (empty($participant)) {
      return array(
        '#type' => 'markup',
        '#markup' => "<p>Participant with ID $id not found</p>",
      );
    } else {
      $info = (array) $participant[$id];
    }
  }

  $form = array();

  // This will hold the participant ID and will only have a value if we are
  // editing an existing record.
  $form['pid'] = array(
    '#type' => 'hidden',
    '#value' => empty($info) ? '' : $id,
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('Full name of participant'),
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => empty($info) ? '' : $info['name'],
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('email'),
    '#description' => t('Email address of participant'),
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => empty($info) ? '' : $info['email'],
  );
  $form['telephone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#description' => t('Phone number(s) of participant'),
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => empty($info) ? '' : $info['phone'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Validation callback for dcn_form().
 */
function dcn_form_validate($form, &$form_state) {
  // Validate the email address.
  if (!filter_var($form_state['values']['email'], FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('Enter a valid email address'));
  }

  // Make the phone number contains only numbers, hyphen and parentheses.
  if (!preg_match('/^[\d\(\)\-]+$/', $form_state['values']['telephone'])) {
    form_set_error('phone', t('Your phone number contain only numbers, hyphens and parentheses'));
  }
}

/**
 * Submission callback for dcn_form().
 *
 * A Drupal database abstraction API function is used to insert the data.
 * @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_insert/7
 */
function dcn_form_submit($form, &$form_state) {
  $data = array(
    'name' => $form_state['values']['name'],
    'email' => $form_state['values']['email'],
    'phone' => $form_state['values']['telephone'],
  );
  if ($form_state['values']['pid']) {
    db_update('dcn')
      ->fields($data)
      ->condition('id', $form_state['values']['pid'], '=')
      ->execute();
      drupal_set_message(t('Participant successfully updated'));
  } else {
    db_insert('dcn')->fields($data)->execute();
    drupal_set_message(t('Participant successfully added'));
  }
}

/**
 * Displays a table of participants.
 *
 * Menu callback function that displays the list of participants along with
 * links to edit or delete on each record.
 * A Drupal database abstraction API function is used to select records from the
 * database.
 *
 * @see https://api.drupal.org/api/drupal/includes!database!database.inc/function/db_select/7
 */
function dcn_list() {
  $participants = db_select('dcn')
    ->fields('dcn')->execute()->fetchAllAssoc('id');

  if (empty($participants)) {
    return array(
      '#type' => 'markup',
      '#markup' => '<p>No participants found</p>',
    );
  }

  // Create the table header.
  $header = array(t('ID'), t('Name'), t('Email'), t('Phone'), t('Operations'));
  // Create the table rows.
  $rows = array();
  $rows = array();
  foreach ($participants as $p) {
    $edit_link = l(t('Edit'), 'dcn/' . $p->id . '/edit');
    $delete_link = l(t('Delete'), 'dcn/' . $p->id . '/delete');
    $rows[] = (array) $p + array($edit_link . '&nbsp;&nbsp;' . $delete_link);
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Deletes a participant.
 * 
 * @param int $pid
 *   ID of the participant to delete
 */
function dcn_delete($pid) {
  db_delete('dcn')
    ->condition('id', $pid, '=')
    ->execute();
  
  drupal_set_message(t('Participant successfully deleted'));
  drupal_goto('dcn/list');
}

/**
 * Implements hook_permission().
 */
function dcn_permission() {
  return array(
    'add participants' =>  array(
      'title' => t('Add Participants'),
    ),

    'edit participants' =>  array(
      'title' => t('Edit Participants'),
    ),
    
    'delete participants' =>  array(
      'title' => t('Delete Participants'),
      'restrict access' => TRUE,
    ),
  );
}
